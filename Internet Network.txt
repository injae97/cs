## 💡 IP(Internet Protocol)
    e.g 인터넷 통신 : 클라이언트 - 인터넷 - 서버(한국(출발지)에서 미국(목적지)에 사는 친구한테 메세지 보낸다고 가정) 
	    - IP(Internet Protocol) : 클라이언트(100.100.100.1)- 출발지IP 와 서버(200.200.200.2) - 목적지IP 각 IP주소 부여
		- IP(인터넷 프로토콜 역할) : 지정한 IP 주소에 데이터 전달, 패킷(Packet)이라는 통신 단위로 데이터 전달
	        * 클라이언트 패킷 전달 : 클라이언트(100.100.100.1) 에서 (출발지 100.100.100.1, 목적지 200.200.200.2, 메세지 내용)을 서버(200.200.200.2)로 보냄
	        * 서버 패킷 전달 : 서버(200.200.200.2) 에서 (출발지 200.200.200.2, 목적지 100.100.100.1, 메세지 : OK)을 클라이언트(100.100.100.1)로 보냄
			
			* 패킷이란?
			    - 패키지 + 버킷 합성어, 실제로 택배박스에 데이터 넣어서 보내는것과 동일
			  
			* IP 프로토콜의 한계
				a. 비연결성 : 패킷을 받을 대상이 없거나 서비스 불능 상태여도 패킷 전송 (e.g : 편지 - 이사갔을수도 있는데도 보냄)
				b. 비신뢰성 : 중간에 패킷이 사라지거나 패킷이 순서대로 도착안한다면? (e.g : 중간에 인터넷망 서버가 문제가 생긴다면? / 메세지 용량이 클 때)
				c. 프로그램 구분 : 같은 IP를 사용하는 서버에서 통신하는 애플리케이션이 두개 이상이라면?
					
				* 해당 문제를 해결하려면? : TCP, UDP  			

## 💡 TCP, UDP 
	* 인터넷 프로토콜 스택의 4계층
		a. 애플리케이션 계층 - HTTP, FTP
		b. 전송 계층 - TCP, UDP,
		c. 인터넷 계층 - IP
		d. 네트워크 인터페이스 계층 - LAN CARD
		
	* 프로토콜 계층
		a. 애플리케이션 : 웹 브라우저, 네트워크 게임, 채팅 프로그램, SOCKET 라이브러리
		b. OS : TCP ,UDP, IP(Internet Protocol)
		c. 네트워크 인터페이스 : LAN 드라이브, 장비, LAN카드 > 인터넷 > 서버
		
	채팅 프로그램을 통해 메시지 전송 
		a. 채팅프로그램에 Hello ! 메세지 생성
		b. SOCKET 라이브러리를 통해 전달
		c. TCP 정보 생성, 메세지 데이터 포함
		d. IP 패킷 생성(TCP 데이터 포함)
		e. Ethernet frame을 씌운 후 인터넷을 통해 서버로 전송
			
	- TCP/IP 패킷 정보 : 출발지 PORT, 목적지 PORT, 전송 제어, 순서, 검증 정보 
		TCP 특징 : 전송 제어 프로토콜
			a. 연결지향 - TCP 3 way handshake(가상 연결)
				e.g : 클라이언트 <-> 서버  
					a. 클라이언트 -> 서버(Synchronized : 접속요청)
					b. 서버 -> 클라이언트(Synchronized : 접속요청 + ACK : 요청 수락)
					c. 클라이언트 -> 서버(ACK : 요청 수락)
						* a + b + c : 연결 과정(connect, 메세지를 3번 주고 받음) 
					d. 데이터 전송
			
			b. 데이터 전달 보증
				e.g : 클라이언트 <-> 서버  
					a. 클라이언트 -> 서버(데이터 전송)
					b. 서버 -> 클라이언트(데이터 잘 받았음)
			
			c. 순서 보장
				e.g : 클라이언트 <-> 서버  
					a. 클라이언트 -> 서버(1. 패킷1, 패킷2, 패킷3 순서로 전송, 2. 패킷1, 패킷3, 패킷2 순서로 도착)
					b. 서버 -> 클라이언트(순서가 잘못된것을 알고난 후, 패킷2부터 다시 보내달라고 요청)
					
			d. 신뢰할 수 있는 프로토콜, 대부분 TCP 사용				
	
	- UDP 특징 : 사용자 데이터그램 프로토콜
		a. 하얀 도화지에 비유(기능 거의 X)
		b. 연결지향 - TCP 3 way handshake X
		c. 데이터 전달 보증 X, 순서보장 x
		
		* 즉, 데이터 전달 및 순서가 보장되지 않지만, 단순하고 빠름
		* IP와 거의 같으며 + 포트 + 체크섬(데이터 검증)정도만 추가
		* 애플리케이션에서 추가 작업 필요 
				
## 💡 PORT			
	- 배가 도착하는 항구(도착지)
	- 같은 IP내에서 프로세스 구분(게임 서버, 웹 브라우저 요청 등)
		e.g : IP(아파트 - 서버 또는 PC), PORT(101동 101호)

	* 0 ~ 65535 할당 가능
		a. 0 ~ 1023 : 잘 알려진 포트라 사용하지 않는 것을 권장
		b. FTP : 20, 21
		c. TELNET : 23
		d. HTTP : 80
		e. HTTPS : 443
			
## 💡 DNS(도메인 네임 시스템 - Domain Name System)				
	- IP는 기억하기 어려우며 변경 될 수도 있기 때문에 DNS를 사용
	- 전화번호부, 도메인명을 IP 주소로 변환
		e.g : 도메인 사서 사용(도메인 명 : kiminje.shop, IP : 200.200.200.2)
			* DNS 서버 : 도메인명(kiminje.shop) / IP : 200.200.200.2 일경우
				a. 클라이언트(100.100.100.1) -> DNS 서버(1. 도메인명 kiminje.shop)
				b. DNS서버 -> 클라이언트(2. 응답 200.200.200.2)
				c. 클라이언트 -> 서버(3. 서버로 접속 200.200.200.2) 