## 💡 HTTP (HyperText Transfer Protocol)
    - HTTP 메세지에 모든 것을 전송
	    a. HTML, TEXT
		b. IMAGE, 음성, 영상, 파일
		c. JSON, XML (API)
		d. 거의 모든 형태의 데이터 전송 가능
		e. 서버간에 데이터를 주고 받을 때도 대부분 HTTP 사용
			
	- HTTP 역사
	    a. HTTP/0.9 1991년 : GET 메서드만 지원, HTTP 헤더 X
		b. HTTP/1.0 1996년 : 메서드, 헤더 추가 
		c. HTTP/1.1 1997년 : 가장 많이 사용, 우리에게 갖아 중요한 버전 <<<
		    - RFC2068(1997) > RFC2616(1999) > RFC7230~7235(2014)
		d. HTTP/2 2015년 : 성능 개선
		e. HTTP/3 진행중 : TCP 대신에 UDP 사용, 성능 개선
	
	- 기반 프로토콜
	    a. TCP : HTTP/1.1, HTTP/2
		b. UDP : HTTP/3
		c. 현재 HTTP/1.1 주로 사용
		    - HTTP/2, HTTP/3 도 점점 증가 
		
	    * Chrome > F12 > Newwork > Tab에서 오른쪽 마우스 > Protocol
		
## 💡 클라이언트 서버 구조(HTTP 특징)
	1. 클라이언트는 서버에 요청을 보내고, 응답을 대기
	2. 서버가 요청에 대한 결과를 만들어서 응답 		
		* Request(요청), Response(응답) 구조
		* 화면은 클라이언트에 저장, 비지니스 로직, 데이터들은 서버에 저장
		
	b. 무상태 프로토콜(스테이스리스), 비연결성
	c. HTTP 메세지
	d. 단순함, 확장 가능 
	
## 💡 상태유지(Stateful) & 무상태(Stateless) 차이
	a. 상태유지(Stateful)
		- 항상 같은 서버가 유지되어야 한다.
		- 중간에 다른 점원(서버)으로 바뀌면 안된다. (중간에 다른 점원(서버)으로 바뀔 때 상태 정보를 다른 점원(서버)에게 미리 알려줘야 한다)

		e.g 상태유지(Stateful) 
			- 고객 : 노트북 얼마인가요?
			- 점원 : 100만원 (노트북 상태 유지)
			
			- 고객 : 2개 구매 할게요.
			- 점원 : 200만원 입니다. 신용카드, 현금중에 어떤걸로 구매하시겠어요? (노트북, 2개 상태 유지)
			
			- 고객 : 신용카드로 구매하겠습니다.
			- 점원 : 200만원 결제 완료되었습니다. (노트북, 2개, 신용카드 상태 유지)
					
		e.g 상태유지(Stateful) - 점원이 중간에 바뀔 경우 
			- 서버가 클라이언트의 이전 상태를 보존 O
			- 고객 : 노트북 얼마인가요?
			- 점원A(서버1) : 100만원 
			
			- 고객 : 2개 구매 할게요.
			- 점원B(서버2) : 무엇을 2개 구매하시겠어요? 
			
			- 고객 : 신용카드로 구매하겠습니다.
			- 점원C(서버3) : 무슨 제품을 몇개 신용카드로 구매하시겠어요? 
		
	b. 무상태(Stateless)
		a. 서버가 클라이언트의 상태를 보존 X
		b. 장점 : 서버 확장성 높음(스케일 아웃 : 수평 확장 유리), 아무 서버나 호출해도 된다.
		c. 단점 : 클라이언트가 추가 데이터 전송
			
		e.g 무상태(Stateless) 
			- 고객 : 노트북 얼마인가요?
			- 점원 : 100만원  
			
			- 고객 : 노트북 2개 구매 할게요.
			- 점원 : 노트북 2개는 200만원 입니다. 신용카드, 현금중에 어떤걸로 구매하시겠어요?  
			
			- 고객 : 노트북 2개를 신용카드로 구매하겠습니다.
			- 점원 : 200만원 결제 완료되었습니다. 
			
		e.g 무상태(Stateless) - 점원이 중간에 바뀔 경우
			- 고객 : 노트북 얼마인가요?
			- 점원A(서버1) : 100만원  
			
			- 고객 : 노트북 2개 구매 할게요.
			- 점원B(서버2) : 노트북 2개는 200만원 입니다. 신용카드, 현금중에 어떤걸로 구매하시겠어요? 
			
			- 고객 : 노트북 2개를 신용카드로 구매하겠습니다.
			- 점원C(서버3) : 200만원 결제 완료되었습니다. 
			
		- 중간에 다른 점원으로 바뀌어도 된다.
		- 갑자기 고객(클라이언트)이 증가해도 점원을 대거 투입할 수 있다.
		- 갑자기 클라이언트 요청이 증가해도 서버를 대거 투입할 수 있다.
			* 즉, 무상태는 응답 서버를 쉽게 바꿀 수 있다. > 무한한 서버 증설 가능
			
	
	* 무상태(Stateless) 실무 한계
		a. 모든 것을 무상태(Stateless)로 설계 할 수 있는 경우도 있고 없는 경우도 있다.
		
		b. 무상태(Stateless)	
			e.g 로그인이 필요 없는 단순한 서비스 소개 화면
			
		c. 상태유지(Stateful) 
			e.g 로그인이 필요한 화면
			- 로그인한 사용자의 경우 로그인 했다는 상태를 서버에 유지
				- 일반적으로 브라우저 쿠키와 서버 세션등을 사용해서 상태 유지
				- 상태 유지는 최소한만 사용
						
## 💡 비연결성(connectionless)
	a. HTTP는 기본이 연결을 유지하지 않는 모델
	b. 일반적으로 초 단위의 이하의 빠른 속도로 응답
	c. 1시간 동안 수천명이 서비스를 사용해도 실제 서버에서 동시에 처리하는 요청은 수십개 이하로 매우 작음
		e.g 웹 브라우저에서 계속 연속해서 검색 버튼을 누르지 않기 때문
	d. 서버 자원을 매우 효율적으로 사용할 수 있음
	
	* 한계와 극복
		a. TCP/IP 연결을 새로 맺어야함 (3 way handshake 시간 추가)
		b. 웹 브라우저로 사이트를 요청하면 HTML 뿐만 아니라, js, css, 추가 image 등 수 많은 자원이 함께 다운로드
			a, b HTTP 초기 - 연결, 종료 낭비
				e.g 클라이언트 와 서버가 연결(0.1초), 요청 / HTML 응답(0.1초), 종료(0.1초),
					연결(0.1초), 요청 / js 응답(0.1초), 종료(0.1초),
					연결(0.1초), 요청 / 이미지 응답(0.1초), 종료(0.1초) 
					합 : 0.9초

		c. 지금은 HTTP 지속 연결(Persistent Connections)로 문제 해결
			e.g 클라이언트 와 서버가 연결(0.1초), 요청 / HTML 응답(0.1초), 요청 / js 응답(0.1초), 요청 / 이미지 응답(0.1초), 종료(0.1초)
			합 : 0.5초
			
		d. HTTP/2, HTTP/3에서 더 많은 최적화

	* 연결을 유지하는 모델
		e.g TCP/IP 연결
			a. 클라이언트1이 서버로 요청을 보낸 후 서버로 부터 응답을 받음
			b. 클라이언트2이 서버로 요청을 보낸 후 서버로 부터 응답을 받음
			c. 클라이언트3이 서버로 요청을 보낸 후 서버로 부터 응답을 받음
			
			* 서버는 연결을 계속 유지, 서버 자원 소모 
			
	* 연결을 유지하지 않는 모델
		e.g TCP/IP 연결
			a. 클라이언트1이 서버로 요청을 보낸 후 서버로 부터 응답을 받음, 볼일 끝나면 즉시 TCP/IP 연결 종료
			b. 클라이언트2이 서버로 요청을 보낸 후 서버로 부터 응답을 받음, 볼일 끝나면 즉시 TCP/IP 연결 종료
			c. 클라이언트3이 서버로 요청을 보낸 후 서버로 부터 응답을 받음, 볼일 끝나면 즉시 TCP/IP 연결 종료
			
			* 서버는 연결 유지 X, 최소한의 자원 사용 및 유지
		
	* 무상태(Stateless) 기억 - 서버 개발자들이 어려워하는 업무
		a. 정말 같은 시간에 딱 맞추어 발생하는 대용량 트래픽
			e.g 선착순 이벤트, 버스표 예약, 대학교 강의 신청, 저녁 2:00 선착순 100명 치킨 할인 이벤트 > 수만명 동시 요청
				
		e.g 보통 이벤트 설계 할 땐?
			- 첫번째 페이지는 로그인도 필요 없는 정적 HTML 페이지 > 이벤트 참여 버튼 누르게 함
							
## 💡 HTTP 메세지 구조
	a. HTTP 요청 메세지 
	    a. start-line 시작 라인 (요청 메세지)
		GET /search?q=hello&hl=ko HTTP/1.1 (start-line 시작 라인)
		Host: www.google.com (header 헤더)
		(empty line 공백 (CRLF(엔터)))
		(message body)
		* 요청 메세지도 body 본문을 가질 수 있음
		
		b. header 헤더
		e.g HTTP 요청 메세지
			GET /search?q=hello&hl=ko HTTP/1.1 (start-line 시작 라인)
			Host: www.google.com (header 헤더) 

		c. empty line 공백 라인(CRLF(엔터)) - 필수 
		d. [message body] - 생략 가능
			
			a. start-line = request-line
			b. request-line = method SP(공백) request-target SP HTTP-version CRLF(엔터)				
			c. HTTP 메서드 (GET, POST, PUT, DELETE)
				- 서버가 수행해야 할 동작 지정
					a. GET : 리소스 조회(요청)
					b. POST : 요청 내역 처리
					c. PUT :  
					d. DELETE : 삭제 해달라는 의미  
					
			d. 요청 대상
			    e.g /search?q=hello&hl=ko
					- absolute-path[?query](절대경로[?쿼리])
					- 절대경로= "/" 로 시작하는 경로
					* 참고 : *, http://...?x=y와 같이 다른 유형의 경로지정 방법도 존재
					
			e. HTTP Version
			    e.g HTTP/1.1

	b. HTTP 응답 메세지 
		a. start-line 시작 라인 (응답 메세지)
		HTTP/1.1 200 OK (start-line 시작 라인)
		Content-Type: text/html;charset=UTF-8 (header 헤더)
		Content-Length: 3423  
		
		(empty line 공백 (CRLF(엔터)))
		
		<html> (message body)
			<body>...</body>
		</html>
		
			a. start-line = status-line
			b. status-line = HTTP-version SP(공백) status-code SP reason-phrase CRLF(엔터)
			c. HTTP version
			d. HTTP 상태 코드
				a. 200 : 성공
				b. 400 : 클라이언트 요청 오류
				c. 500 : 서버 내부 오류
				
			* 이유 문구 : 사람이 이해할 수 있는 짧은 상태 코드 설명 글 
			
		b. header 헤더
			a. header-field = field-name ":" OWS field-value OWS (OWS:띄어쓰기 허용)
			b. field-name은 대소문자 구문 없음
			c. HTTP 전송에 필요한 모든 부가 정보
				e.g 메세지 바디의 내용, 메세지 바디의 크기, 압축, 인증, 요청 클라이언트(브라우저-Chrome) 정보, 서버 애플리케이션 정보, 캐시 관리 정보
			
			d. 표준 헤더가 너무 많음
			e. 필요시 임의의 헤더 추가 가능
				e.g : hellowolrd : hi 
				
			e.g HTTP 응답 메세지
				HTTP/1.1 200 OK (start-line 시작 라인)
				Content-Type: text/html;charset=UTF-8 (header 헤더) <<
				Content-Length: 3423  
			
				(empty line 공백 (CRLF(엔터)))
			
				<html> (message body)
					<body>...</body>
				</html>
				
		c. HTTP 메세지 바디
			a. 실제 전송할 데이터
			b. HTML 문서, 이미지 영상, JSON 등등 byte로 표현할 수 있는 모든 데이터 전송 가능
			
	* HTTP는 단순하며 HTTP 메세지도 매우 단순
	* 크게 성공하는 표준 기술은 단순하지만 확장 가능한 기술