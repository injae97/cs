## 💡 캐시 기본 동작
    a. 캐시가 없을 때
        - 데이터가 변경되지 않아도 계속 네트워크를 통해서 데이터를 다운로드 받아야 한다.
        - 인터넷 네트워크는 매우 느리고 비싸다.
        - 브라우저 로딩 속도가 느리다.
        - 느린 사용자 경험 
        
        e.g 캐시가 없을 때(첫 번째 요청)
        1. 웹 브라우저(요청 1) -> 서버
        
        웹 브라우저
        GET/ star.jpg
        
        서버
        HTTP/1.1 200 OK
        Content-Type: image/jpeg
        Content-Length: 34012
        
        lkj123kljoasdnjsadkasjldnjn123498iasdnjklasdnjksadnasjkdn12i3u4uiasdnjk123ejiodoji12ojiue3njmkl
        
        2. 서버(응답) -> 웹 브라우저 
        
        서버
        star.jpg
        
        1.1M 가정
        HTTP 헤더: 0.1M
        HTTP 바디: 1.0M
        
        서버가 클라이언트에게 1.1 M 전송 1 
        
        e.g 캐시가 없을 때(두 번째 요청)
        1. 웹 브라우저(요청 2) -> 서버
        
        웹 브라우저
        GET/ star.jpg
        
        서버
        HTTP/1.1 200 OK
        Content-Type: image/jpeg
        Content-Length: 34012
        
        lkj123kljoasdnjsadkasjldnjn123498iasdnjklasdnjksadnasjkdn12i3u4uiasdnjk123ejiodoji12ojiue3njmkl
        
        2. 서버(응답) -> 웹 브라우저 
        
        서버
        star.jpg
        
        1.1M 가정
        HTTP 헤더: 0.1M
        HTTP 바디: 1.0M
        
        서버가 클라이언트에게 1.1 M 전송 2 
    
    b. 캐시 적용
        - 캐시 덕분에 캐시 가능 시간동안 네트워크를 사용하지 않아도 된다.
        - 비싼 네트워크 사용량을 줄일 수 있다.
        - 브라우저 로딩 속도가 매우 빠르다.
        - 빠른 사용자 경험
        
        e.g 캐시 적용(첫 번째 요청)
        1. 웹 브라우저(요청 1) -> 서버
        
        웹 브라우저
        GET/ star.jpg
        
        서버
        HTTP/1.1 200 OK
        Content-Type: image/jpeg
        cache-control: max-age=60(캐시가 유효한 시간(초))
        Content-Length: 34012
        
        lkj123kljoasdnjsadkasjldnjn123498iasdnjklasdnjksadnasjkdn12i3u4uiasdnjk123ejiodoji12ojiue3njmkl
        
        * 브라우저 캐시: 응답 결과를 캐시에 저장(60초 유효)        
        
        e.g 캐시 적용(두 번째 요청) - 캐시 시간 유효 
        1. 웹 브라우저(요청 2) -> 브라우저 캐시(캐시 유효 시간 검증(60초 유효))
          
        웹 브라우저
        GET/ star.jpg
        
        * 캐시가 유효 하다면 캐시에서 조회 
                    
    c. 캐시 시간 초과
        - 캐시 유효 시간이 초과하면, 서버를 통해 데이터를 다시 조회하고, 캐시를 갱신한다.
        - 이때 다시 네트워크 다운로드가 발생한다.
        
        e.g 캐시 적용(세 번째 요청) - 캐시 시간 초과
        1. 웹 브라우저(요청 3) -> 브라우저 캐시(캐시 유효 시간 검증(60초 초과))
        
        웹 브라우저
        GET/ star.jpg
        
        * 웹 브라우저 -> 브라우저 캐시(캐시 60초 초과 -> 다시 요청)
        
        웹 브라우저
        GET/ star.jpg
        
        서버
        HTTP/1.1 200 OK
        Content-Type: image/jpeg
        cache-control: max-age=60(캐시가 유효한 시간(초))
        Content-Length: 34012
        
        lkj123kljoasdnjsadkasjldnjn123498iasdnjklasdnjksadnasjkdn12i3u4uiasdnjk123ejiodoji12ojiue3njmkl
        
        1.1M 가정
        HTTP 헤더: 0.1M
        HTTP 바디: 1.0M
        
        서버가 클라이언트에게 1.1 M 전송 3
        
        * 브라우저 캐시: 응답 결과를 다시 캐시에 저장 
        * 캐시 시간은 지났지만 이미지가 같은 파일 이라면 다시 받아야 할까? 
        
## 💡 검증 헤더와 조건부 요청 1
    a. 검증 헤더(Last-Modified)
        - 캐시 데이터와 서버 데이터가 같은지 검증하는 데이터
    
    b. 조건부 요청 헤더(if-modified-since)
        - 검증 헤더로 조건에 따른 분기

    * 캐시 시간 초과
        - 캐시 유효 시간이 초과해서 서버에 다시 요청하면 다음 두 가지 상황이 나타난다.
            1. 서버에서 기존 데이터를 변경함
            2. 서버에서 기존 데이터를 변경하지 않음(똑같은 데이터 = 이미지 같은 파일)
                - 생각해보면 데이터를 전송하는 대신에 저장해 두었던 캐시를 재사용 할 수 있다.
                - 단 클라이언트의 데이터와 서버의 데이터가 같다는 사실을 확인할 수 있는 방법 필요
                    e.g 검증 헤더 추가(첫 번째 요청)
                    
                    1. 웹 브라우저(요청) -> 서버
                    
                    웹 브라우저
                    GET/ star.jpg
                    
                    서버
                    HTTP/1.1 200 OK
                    Content-Type: image/jpeg
                    cache-control: max-age=60(캐시가 유효한 시간(초))
                    Last-Modified: 2020-11-10T10:00:00+00:00(데이터가 마지막에 수정된 시간)
                    Content-Length: 34012
                    
                    lkj123kljoasdnjsadkasjldnjn123498iasdnjklasdnjksadnasjkdn12i3u4uiasdnjk123ejiodoji12ojiue3njmkl
                    
                    2. 서버(응답) -> 웹 브라우저 
                    
                    서버
                    star.jpg
                    
                    1.1M 가정
                    HTTP 헤더: 0.1M
                    HTTP 바디: 1.0M
                    
                    서버가 클라이언트에게 1.1 M 전송 1     
                    * 브라우저 캐시: 응답 결과를 캐시에 저장(데이터 최종 수정일(2020-11-10T10:00:00+00:00))
                    
                    e.g 검증 헤더 추가(두 번째 요청) - 캐시 시간 초과
                    
                    1. 웹 브라우저(요청) -> 브라우저 캐시
                    
                    웹 브라우저
                    GET/ star.jpg
                    
                    * 웹 브라우저가 브라우저 캐시한테 요청(캐시 60초 초과)
                    
                    2. 웹 브라우저 -> 서버(검증 헤더 요청 1)
                    
                    웹 브라우저
                    GET/ star.jpg
                    if-modified-since: 2020-11-10T10:00:00+00:00
                    
                    * 브라우저 캐시: 응답 결과를 캐시에 저장(데이터 최종 수정일(2020-11-10T10:00:00+00:00))
                    * 브라우저 캐시가 가지고 있는 데이터 최종 수정일을 붙인 다음 보냄(if-modified-since)
                    
                    3. 서버 -> 웹 브라우저(검증 헤더 요청 2)
                    * 서버에서 날짜를 보고 데이터 검증
                        - 웹브라우저 = 서버(데이터가 아직 수정되지 않았다)
                    
                    서버 
                    HTTP/1.1 304 Not Modified
                    Content-Type: image/jpeg
                    cache-control: max-age=60
                    Last-Modified: 2020-11-10T10:00:00+00:00
                    Content-Length: 34012
                    
                    * HTTP Body가 없음 
                    
                    star.jpg
                    0.1M 가정
                    HTTP 헤더: 0.1M
                    
                    서버가 클라이언트에게 0.1 M 전송(HTTP Body 전송 X)
                    
                    * 304 Not Modified(데이터가 변경되지 않았구나 그렇기 때문에 그대로 사용하면 되는구나 라고 생각)
                        - 브라우저 캐시: 응답 결과를 재사용, 헤더 데이터 갱신(60초 유효)
                        - 데이터 최종 수정일(2020-11-10T10:00:00+00:00))
                        
                    4. 브라우저 캐시 -> 웹 브라우저 (캐시에서 조회)
                        - 데이터 최종 수정일(2020-11-10T10:00:00+00:00)
    
    * 정리
        - 캐시 유효 시간이 초과해도 서버의 데이터가 갱신되지 않으면 304 Not Modified + 헤더 메타 정보만 응답(HTTP Body 제외)
            * HTTP 헤더 데이터만 다운로드함
        - 클라이언트는 서버가 보낸 응답 헤더 정보로 캐시의 메타 정보를 갱신
        - 클라이언트는 캐시에 저장되어 있는 데이터 재활용
        - 결과적으로 네트워크 다운로드가 발생하지만 용량이 적은 헤더 정보만 다운로드
        - 매우 실용적인 해결책
        
## 💡 검증 헤더와 조건부 요청 2
    a. 검증 헤더(Validator)
        - 캐시 데이터와 서버 데이터가 같은지 검증하는 데이터
            e.g Last-Modified, ETag
            
            * ETag(Entity Tag)
                - 캐시용 데이터에 임의의 고유한 버전 이름을 달아둠
                    e.g ETag: "v1.0", ETag: "a2jiodwjekjl3"
                - 데이터가 변경되면 이 이름을 바꾸어서 변경함(Hash를 다시 생성)
                    e.g ETag: "aaaaa" -> ETag: "bbbbb"
                - 진짜 단순하게 ETag만 보내서 같으면 유지, 다르면 다시 받기!
                
                e.g 검증 헤더 추가(첫 번째 요청)
                
                1. 웹 브라우저(요청) -> 서버
                
                웹 브라우저
                GET/ star.jpg
                
                서버
                HTTP/1.1 200 OK
                Content-Type: image/jpeg
                cache-control: max-age=60(캐시가 유효한 시간(초))
                ETag: "aaaaaaaaaaaaaa"
                Content-Length: 34012
                
                lkj123kljoasdnjsadkasjldnjn123498iasdnjklasdnjksadnasjkdn12i3u4uiasdnjk123ejiodoji12ojiue3njmkl            

                2. 서버 ->  웹 브라우저
                
                서버
                star.jpg
                
                ETag "aaaaaaaaaaaaaa"
                HTTP 헤더: 0.1M
                HTTP 바디: 1.0M
                
                서버가 클라이언트에게 1.1 M 전송 
                
                * 브라우저 캐시: ETag "aaaaaaaaaaaaaa"(60초 유효, 응답 결과를 캐시에 저장)


                e.g 검증 헤더 추가(두 번째 요청) - 캐시 시간 초과 
                
                1. 웹 브라우저(요청 2) -> 브라우저 캐시
                
                웹 브라우저
                GET/ star.jpg
                
                브라우저 캐시
                ETag "aaaaaaaaaaaaaa" (60초 초과)
                
                2. 웹 브라우저(요청) -> 서버
                GET /star.jpg
                If-None-Match: "aaaaaaaaaaaaaa" (캐시가 가지고 있는 ETag)
                
                * 서버에 매치가 되어버림
                    - 데이터가 아직 수정되지 않았다.
                
                3. 서버(응답) -> 웹 브라우저 
                
                서버 
                HTTP/1.1 304 Not Modified
                Content-Type: image/jpeg
                cache-control: max-age=60
                ETag "aaaaaaaaaaaaaa"
                Content-Length: 34012    

                * HTTP Body 없음
                
                star.jpg
                0.1M 가정
                HTTP 헤더: 0.1M
                
                서버가 클라이언트에게 0.1 M 전송(HTTP Body 전송 X)    

                * 브라우저 캐시: ETag "aaaaaaaaaaaaaa"(응답 결과를 재사용, 헤더 데이터 갱신 (60초 유효))
                
                4. 브라우저 캐시 -> 웹 브라우저 
                    - 브라우저 캐시: ETag "aaaaaaaaaaaaaa" (캐시에서 조회)
                
                * Last-Modified: Thu, 04 Jun 2020 07:19:24 GMT
                
    b. 조건부 요청 헤더
        - 검증 헤더로 조건에 따른 분기
            e.g If-Modified-since, If-Unmodified-since: Last-Modified 값 사용
                * If-Modified-since: 이후에 데이터가 수정되었으면?
                    a. 데이터 미변경 예시
                        - 캐시: 2020-11-10T10:00:00+00:00 vs 서버: 2020-11-10T10:00:00+00:00 
                        - 304 Not Modified, 헤더 데이터만 전송(HTTP Body 미포함)
                            - 전송 용량 0.1M(헤더 0.1M, 바디 1.0M)
                            
                    b. 데이터 변경 예시
                        - 캐시: 2020-11-10T10:00:00+00:00 vs 서버: 2020-11-10T11:00:00+00:00 
                        - 200 OK, 모든 데이터 전송(HTTP Body 포함)
                            - 전송 용량 1.1M(헤더 0.1M, 바디 1.0M)
                    
                    * Last-Modified, If-modified-since 단점
                        - 1초 미만(0.1 ~ 0.9초) 단위로 캐시 조정이 불가능
                        - 날짜 기반의 로직 사용
                        - 데이터를 수정해서 날짜가 다르지만 같은 데이터를 수정해서 데이터 결과가 똑같은 경우(a -> b, b-> a 파일 이름 변경했어도 다운)
                        - 서버에서 별도의 캐시 로직을 관리하고 싶은 경우
                            e.g 스페이스나 주석처럼 크게 영향이 없는 변경에서 캐시를 유지하고 싶은 경우
                                - ETag 사용
                                        
            e.g If-Match, If-None-Match: ETag 값 사용
                - 조건이 만족하면 200 OK
                - 조건이 만족하지 않으면 304 Not Modified
        
    
    * 정리 
        - 진짜 단순하게 ETag만 서버에 보내서 같으면 유지, 다르면 다시 받기!
        - 캐시 제어 로직을 서버에서 완전히 관리
        - 클라이언트는 단순히 이 값을 서버에 제공(클라이언트는 캐시 메커니즘을 모름)
        e.g 
            - 서버는 배타 오픈 기간인 3일 동안 파일이 변경되어도 ETag를 동일하게 유지
            - 애플리케이션 배포 주기에 맞추어 ETag 모두 갱신
            
## 💡 캐시와 조건부 요청 헤더
    a. Cache-Control: 캐시 제어(캐시 지시어(directives))
        - Cache-Control: max-age
            - 캐시 유효 시간, 초 단위
        - Cache-Control: no-cache
            - 데이터는 캐시해도 되지만, 항상 윈(origin) 서버에 검증하고 사용
        - Cache-Control: no-store
            - 데이터에 민감한 정보가 있으므로 저장하면 안됨(메모리에서 사용하고 최대한 빨리 삭제)
            
    b. Pragma: 캐시 제어(하위 호환)
        - Pragma: no-cache
        - HTTP 1.0 하위 호환        
    
    c. Expires: 캐시 유효 기간(하위 호환)
        - 캐시 만료일을 정확한 날짜로 지정
        - expires: Mon, 01 Jan 1990 00:00:00 GMT
        - HTTP 1.0 부터 사용
        - 지금은 더 유연한 Cache-Control: max-age 권장
        - Cache-Control: max-age와 함께 사용하면 Expires는 무시

## 💡 프록시 캐시
    * 원 서버(origin 서버) 직접 접근
        e.g 한국에 있는 클라이언트(웹 브라우저1, 2, 3 500ms(0.5초)) - 미국에 있는 원 서버
        
        e.g 프록시 캐시 도입(첫 번째 요청)
        1. 웹 브라우저1, 2, 3(100ms(0.1초)) -> 프록시 캐시 서버(한국 어딘가(400ms (0.4초)) -> 미국에 있는 원 서버
        
        * 첫 번째 유저는 느림(웹 브라우저1 - private 캐시) -> 프록시 캐시 서버(한국 어딘가 - public 캐시) -> 미국에 있는 원 서버
            * 기타
            - Cache-Control: public
                - 응답이 public 캐시에 저장되어도 됨
            - Cache-Control: private
                - 응답이 해당 사용자만을 위한 것임
                - private 캐시에 저장해야 함(기본 값)
            - Cache-Control: s-maxage
                - 프록시 캐시에만 적용되는 max-age
            - Age: 60(HTTP 헤더)
                - 오리진 서버에서 응답 후 프록시 캐시 내에 머문 시간(초)

## 💡 캐시 무효화
    - Cache-Control(캐시 지시어(directives)): 확실한 캐시 무효화 응답
        a. Cache-Control: no-cache
            - 데이터는 캐시해도 되지만, 항상 원 서버에 검증하고 사용(이름에 주의)
            
            e.g no-cache vs must-revalidate(no-cache 기본 동작)    
            1. 웹 브라우저 -> 프록시 캐시
            웹 브라우저(캐시 서버 요청 no-cache + ETag)
            
            * 브라우저 캐시: no-cache ETag: "aaa"
            
            2. 프록시 캐시 -> 원 서버
            프록시 캐시(원 서버 요청 no-cache + ETag)
            
            3. 원 서버 검증
            
            4. 원 서버 -> 프록시 캐시(응답 304 Not Modified)
            
            5. 프록시 캐시 -> 웹 브라우저(응답 304 Not Modified)
            
            6. 브라우저 캐시 -> 웹 브라우저
            브라우저 캐시 no-cache ETag: "aaa"(캐시 데이터 사용)
            
            e.g no-cache vs must-revalidate(no-cache 순간 네트워크 단절(원 서버 접근 불가))
            1. 웹 브라우저 -> 프록시 캐시
            웹 브라우저(캐시 서버 요청 no-cache + ETag)
            
            * 브라우저 캐시: no-cache ETag: "aaa"
            
            2. 프록시 캐시 -> 원 서버
            프록시 캐시(원 서버 요청 no-cache + ETag
            * no-cache
                - 원 서버에 접근할 수 없는 경우 캐시 서버 설정에 따라서 캐시 데이터를 반환할 수 있음
            * Error or 200 OK
                - 오류 보다는 오래된 데이터라도 보여주자
            
            3. 프록시 캐시 -> 웹 브라우저 (응답)
            
            프록시 캐시(응답)
            200 OK
            
        b. Cache-Control: no-store
            - 데이터에 민감한 정보가 있으므로 저장하면 안됨
            - 메모리에서 사용하고 최대한 빨리 삭제
            
        c. Cache-Control: must-revalidate
            - 캐시 만료 후 최초 조회시 원 서버에 검증해야함
            - 원 서버 접근 실패시 반드시 오류가 발생해야함 - 504(GateWay Timeout)
            - must-revalidate는 캐시 유효 시간이라면 캐시를 사용함
            
            e.g no-cache vs must-revalidate(must-revalidate 순간 네트워크 단절(원 서버 접근 불가))
            1. 웹 브라우저 -> 프록시 캐시
            웹 브라우저(캐시 서버 요청 must-revalidate + ETag)
                
            2. 프록시 캐시 -> 원 서버
            프록시 캐시(원 서버 요청 must-revalidate + ETag
            * must-revalidate
                - 원 서버에 접근할 수 없는 경우 항상 오류가 발생해야 함
            * 504 GateWay Timeout
                - 매우 중요한 돈과 관련된 결과로 생각해보자
            
            3. 프록시 캐시 -> 웹 브라우저 (응답)
            
            프록시 캐시(응답)
            504 GateWay Timeout    
        
        d. Pragma: no-cache
            - HTTP 1.0 하위 호환