## 💡 HTTP General Header 1
    * HTTP 헤더
        - header-field = field-name ":" OWS field-value OWS(OWS:띄어쓰기 허용)
        - field-name은 대소문자 구문 없음
            GET /search?q=hello&hl=ko HTTP/1.1
            Host: www.google.com
            
            HTTP/1.1 200 OK
            Content-Type:text/html;charset=UTF-8
            Content-Length: 3423
            
            <html>
                <body>...</body>
            </html>
        
    * HTTP 헤더 용도
        - HTTP 전송에 필요한 모든 부가정보
        e.g 메세지 바디의 내용, 메세지 바디의 크기, 압축, 인증, 요청 클라이언트, 서버 정보, 캐시 관리 정보...
        - 표준 헤더가 너무 많음
        - 필요시 임의의 헤더 추가 가능
            e.g helloworld: hi
    
    * HTTP 헤더 분류 - RFC2616(과거)
        a. General 헤더: 메세지 전체에 적용되는 정보
            - e.g Connection: close
        b. Request 헤더: 요청 정보 
            - e.g User-Agent: Mozilla/5.0(Macintosh; ..)
        c. Response 헤더: 응답 정보 
            - e.g Server: Apache
        d. Entity 헤더: 엔티티 바디 정보
            - e.g Content-Type: text/html, Content-Length: 3423 
                
        e.g 
        POST / HTTP/1.1
         
        [Request headers]
        Host: localhost:8000
        User-Agent: Mozilla/5.0(Macintosh; ..) FireFox/51.0
        Accpet: text/html, application/xhtml+xml, ..., */*;q=0.8
        Accpet-Language: en-US, en;q=0.5
        Accpet-Encoding: gzip, deflate
        
        [General headers]
        Connection: keep-alive
        Upgrade-Insecure-Requests: 1
        
        [Entity headers]
        Content-Type: multipart/form-data; boundary= 12656974
        Content-Length: 345
        
        -12656974
        (more data)
    
        * HTTP BODY - message body(RFC2616(과거))
            - 메세지 본문(message body)은 엔티티 본문(entity body)을 전달하는데 사용
            - 엔티티 본문은 요청이나 응답에서 전달할 실제 데이터(메세지 본문안에 엔티티 본문을 담아서 전달한다고 생각)
            - 엔티티 헤더는 엔티티 본문의 데이터를 해석할 수 있는 정보 제공
                - 데이터 유형(html, json), 데이터 길이, 압축 정보 등등
                
            e.g 
            HTTP/1.1 200 OK
            
            [엔티티 헤더]
            Content-Type:text/html;charset=UTF-8
            Content-Length: 3423
            
            [메세지 본문, 엔티티 본문]
            <html>
                <body>...</body>
            </html>
    
    
    * RFC723x 변화(최신)
        - 엔티티(Entity) -> 표현(Representation)
        - Representation = representation Metadata + Representation Data
        - 표현 = 표현 메타데이터 + 표현 데이터
        
            * HTTP BODY - message body(RFC7230(최신))
            - 메세지 본문(message body)을 통해 표현 데이터 전달
            - 메세지 본문 = 페이로드(payload)
            - 표현은 요청이나 응답에서 전달할 실제 데이터
            - 표현 헤더는 표현 데이터를 해석할 수 있는 정보 제공
                - 데이터 유형(html, json), 데이터 길이, 압축 정보 등등
            * 참고: 표현 헤더는 표현 메타데이터와 페이로드 메세지를 구분해야 하지만,
                
            e.g 
            HTTP/1.1 200 OK
            
            [표현 헤더]
            Content-Type:text/html;charset=UTF-8
            Content-Length: 3423
            
            [메세지 본문, 표현 데이터]
            <html>
                <body>...</body>
            </html>
            
## 💡 표현 헤더(Representation header)
    a. Content-Type: 표현 데이터의 형식
        - 표현 데이터의 형식 설명
        - 미디어 타입, 문자 인코딩
        * 표현 헤더는 전송, 응답 둘다 사용
        e.g 
            a. text/html; charset=UTF-8
                HTTP/1.1 200 OK
                Content-Type:text/html;charset=UTF-8
                Content-Length: 3423
                
                <html>
                    <body>...</body>
                </html>            
            
            b. application/json
                HTTP/1.1 200 OK
                Content-Type: application/json
                Content-Length: 16
                
                {"data": "hello"}
            
            c. image/png        
    
    b. Content-Encoding: 표현 데이터의 압축 방식
        - 표현 데이터 인코딩
        - 표현 데이터를 압축하기 위해 사용
        - 데이터를 전달하는 곳에서 압축 후 인코딩 헤더 추가
        - 데이터를 읽는 쪽에서 인코딩 헤더의 정보로 압축 해제
        
        e.g 
            a. gzip
            b. deflate
            c. identity(압축 안함)
            
            e.g
            HTTP/1.1 200 OK
            Content-Type:text/html;charset=UTF-8
            Content-Encoding: gzip
            Content-Length: 521
            
            lkj123klasdjikasjdqwanmdlasdnasdjkkio887213asd

    c. Content-Language: 표현 데이터의 자연 언어
        - 표현 데이터의 자연 언어
        - 표현 데이터의 자연 언어를 표현
        
        e.g 
            a. ko
            b. en
            c. en-US
            
            e.g
            HTTP/1.1 200 OK
            Content-Type:text/html;charset=UTF-8
            Content-Language: ko (en, en-US)
            Content-Length: 521
            
            <html>
            안녕하세요.
            </html>
                        
    d. Content-Length: 표현 데이터의 길이
        - 표현 데이터의 길이
        - 바이트 단위
        - Transfer-Encoding(전송 코딩)을 사용하면 Content-Length를 사용하면 안됨
        
        e.g 
        HTTP/1.1 200 OK
        Content-Type:text/html;charset=UTF-8
        Content-Length: 5
        
        hello
    
## 💡 협상(Content Negotiation)
    - 클라이언트가 선호하는 표현 요청
    a. Accpet: 클라이언트가 선호하는 [미디어 타입 전달]
    b. Accpet-Charset: 클라이언트가 선호하는 [문자 인코딩]
    c. Accpet-Encoding: 클라이언트가 선호하는 [압축 인코딩]
    d. Accpet-Language: 클라이언트가 선호하는 [자연 언어]
        e.g Accpet-Language 적용전
            1. 한국어 브라우저 사용(언어 지정 X) -> 다중 언어 지원 서버
            2. 다중 언어 지원 서버(언어 영어 설정) -> 한국어 브라우저 사용 

            * 한국어 브라우저
                GET /event

            * 다중 언어 지원 서버(기본 영어(en), 한국어 지원(ko))
                Content-Language: en
                hello(영어)
                
        e.g Accpet-Language 적용후
            1. 한국어 브라우저 사용(언어 한국어 지정) -> 다중 언어 지원 서버
            2. 다중 언어 지원 서버(언어 한국어 설정) -> 한국어 브라우저 사용 

            * 한국어 브라우저
                GET /event
                Accpet-Language: ko

            * 다중 언어 지원 서버(기본 영어(en), 한국어 지원(ko))
                Content-Language: ko
                안녕하세요    
    
        e.g Accpet-Language 복잡한 예시
            1. 한국어 브라우저 사용(언어 한국어 지정) -> 다중 언어 지원 서버
            2. 다중 언어 지원 서버(언어 독일어 설정) -> 한국어 브라우저 사용 

            * 한국어 브라우저
                GET /event
                Accpet-Language: ko

            * 다중 언어 지원 서버(기본 독일어(de), 영어도 지원(en))
                Content-Language: de
                Hallo(독일어)            
        
        * 협상과 우선순위 1(Quality Values(q))
        - Quality Values(q) 값 사용
        - 0~1, 클수록 높은 우선순위 (생략하면 1)
        - Accpet-Language: ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
            1. ko-KR;q=1 (q생략)
            2. ko;q=0.9
            3. en-US;q=0.8
            4. en;q=0.7
        
        e.g 
            GET /event
            Accpet-Language: ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7

            e.g Accpet-Language 협상과 우선순위 사용 예시
            1. 한국어 브라우저 사용(언어 우선순위 지정) -> 다중 언어 지원 서버
            2. 다중 언어 지원 서버(언어 우선순위에 맞게 설정) -> 한국어 브라우저 사용 

            * 한국어 브라우저
                GET /event
                Accpet-Language: ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7

            * 다중 언어 지원 서버(기본 독일어(de), 영어도 지원(en))
                Content-Language: en
                Hello(영어)    

        * 협상과 우선순위 2(Quality Values(q))
        - 구체적인 것이 우선한다.
        - Accpet: text/*, text/plain, text/plain;format=flowed, */*
            1. text/plain;format=flowed
            2. text/plain
            3. text/* 
            4. */*
            
        e.g 
            GET /event
            Accpet: text/*, text/plain, text/plain;format=flowed, */*
            
        * 협상과 우선순위 3(Quality Values(q))
        - 구체적인 것을 기준으로 미디어 타입을 맞춘다.
        - Accpet: text/*;q=0.3, text/html;q=0.7, text/html;level=1, text/html;level=2;q=0.4, */*;q=0.5
            
            Media Type               Quality
            text/html;level=1           1
            text/html                  0.7
            text/plain                 0.3
            image/jpeg                 0.5        
            text/html;level=2          0.4
            text/html;level=3          0.7
            
    * 협상 헤더는 요청시에만 사용
    
## 💡 전송 방식
    a. 단순 전송(Content-Length)
        - 한번에 요청하고, 한번에 쭉 받는 것
        
        e.g 클라이언트(GET /event) -> 서버 
        HTTP/1.1 200 OK
        Content-Type: text/html;charset-UTF-8
        Content-Length: 3423
        
        <html>
            <body>...</body>
        </html>
    
    b. 압축 전송
        - gzip으로 압축했기 때문에 길이가 확 줄어듬
        
        e.g 클라이언트(GET /event) -> 서버  
        HTTP/1.1 200 OK
        Content-Type: text/html;charset-UTF-8
        Content-Encoding: gzip
        Content-Length: 521
        
        lkj123kljoasdnmkasdnkjsadnquwnj215dsascnjoasdjnklasdk
        
    c. 분할 전송
        - Transfer-Encoding: chunked 사용
        - 네트워크가 5byte(Hello) 보내고, 5byte(World) 보내고, 0byte Enter 쳐서 보냄(분할)
        * Content-Length를 넣어서 사용 X(예상을 못하기 때문에)
        
        e.g 클라이언트(GET /event) -> 서버  
        HTTP/1.1 200 OK
        Content-Type: text/plain
        Transfer-Encoding: chunked
        
        5
        Hello
        5
        World
        0
        \r\n
            
    d. 범위 전송(Range, Content-Range)
        - 범위를 지정해서 데이터 전송(Range: bytes=1001-2000)
        
        e.g 클라이언트(/event) -> 서버
            GET /event
            Range: bytes=1001-2000
            
            서버
            HTTP/1.1 200 OK
            Content-Type: text/plain
            Content-Range: bytes 1001-2000 / 2000
            
            qweqwe1l2iu3019qwdnjasdnjkawdnqwj213y
            
## 💡 일반 정보
    a. From : 유저 에이전트의 이메일 정보
        - 일반적으로 잘 사용되지 않음
        - 검색 엔진 같은 곳에서 주로 사용
        - 요청에서 사용
        
    b. Referer: 이전 웹 페이지 주소+
        - 일반적으로 많이 사용
        - 현재 요청된 페이지의 이전 웹 페이지 주소
        - A -> B로 이동하는 경우 B를 요청할 때 Referer: A를 포함해서 요청
        - Referer를 사용해서 유입 경로 분석 가능
        - 요청에서 사용
        * 참고: referer는 단어 referrer의 오타(즉 referrer가 정상 단어)
        e.g Google Search
            - 요청(Request Headers)
                - referer: https://www.google.com 
    
    c. User-Agent: 유저 에이전트 애플리케이션 정보
        - user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.183 Safari/537.36
        - 클라이언트의 애플리케이션 정보(웹 브라우저 정보 등등)
        - 통계 정보
        - 어떤 종류의 브라우저에서 장애가 발생하는지 파악 가능
        - 요청에서 사용
        e.g Google Search
        - 요청(Request Headers)
            - user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.183 Safari/537.36
            
    d. Server: 요청을 처리하는 ORIGIN 서버의 소프트웨어 정보
        - Server : Apache/2.2.22(Debian)
        - server : nginx
        - 응답에서 사용
        
    e. Date: 메세지가 생성된 날짜
        - Date: Tue, 15 Nov 1994 08:12:13 GMT
        - 응답에서 사용

## 💡 특별한 정보
    a. Host: 요청한 호스트 정보(도메인)
        - 요청에서 사용
        - 필수값임
        - 하나의 서버가 여러 도메인을 처리해야 할 때
        - 하나의 IP 주소에 여러 도메인이 적용되어 있을 때
        
        e.g 
            GET /search?q=hello&hl=ko HTTP/1.1
            Host: www.google.com
        
        e.g 서버(IP:200.200.200.2) - aaa.com, bbb.com, ccc.com
            - 가상호스트를 통해 여러 도메인을 한번에 처리할 수 있는 서버(실제 애플리케이션이 여러개 구동될 수 있다.)
        
            * 만약 Host가 없다면?
                e.g 클라이언트(IP: 100.100.100.1) -> 서버(IP: 200.200.200.2)
                                
                클라이언트
                GET /hello HTTP/1.1
                
                * Host가 없다면 aaa.com, bbb.com, ccc.com 중 어디로 가야할 지 모름
            
            * 만약 Host가 있다면?
            e.g 클라이언트(IP: 100.100.100.1) -> 서버(IP: 200.200.200.2)
                        
            클라이언트
            GET /hello HTTP/1.1
            Host: aaa.com
            
            * Host가 있어서 aaa.com 으로 전달
                
    b. Location: 페이지 리다이렉션
        - 웹 브라우저는 3xx 응답의 결과에 Location 헤더가 있으면 Location 위치로 자동 이동(리다이렉트)
        - 201(Created): Location 값은 요청에 의해 생성된 리소스 URI
        - 3xx(Redirection): Location 값은 요청을 자동으로 리다이렉션하기 위한 대상 리소스를 가리킴
    
    c. Allow: 허용 가능한 HTTP 메서드
        - 405(Method Not Allowed) 에서 응답에 포함해야함
        - Allow: GET, HEAD, PUT 
    
    d. Retry-After: 유저 에이전트가 다음 요청을 하기까지 기다려야 하는 시간
        - 503(Service Unavailable): 서비스가 언제까지 불능인지 알려줄 수 있음
        - Retry-After: Fri, 31 Dec 1999 23:59:59 GMT (날짜 표기)
        - Retry-After: 120 (초단위 표기)
        
## 💡 인증
    a. Authorization: 클라이언트 인증 정보를 서버에 전달
        e.g Authorization: Basic xxxxxxxxxxxxxxxxxx
    
    b. WWW-Authenticate: 리소스 접근시 필요한 인증 방법 정의
        - 리소스 접근시 필요한 인증 방법 정의
        - 401 Unauthorized 응답과 함께 사용
        - WWW-Authenticate: Newauth realm="apps", type=1, title="Login to \"apps\"", Basic realm="simple" (서버 -> 클라이언트 반환)
        
## 💡 쿠키(Cookie)
    e.g 쿠키 미사용 - 로그인
    1. 웹브라우저 -> 서버(요청) 
    웹브라우저
    POST /login HTTP/1.1
    user=홍길동
    
    2. 서버 -> 웹브라우저(응답)
    서버
    HTTP/1.1 200 OK
    
    홍길동님이 로그인했습니다.
    
        e.g 쿠키 미사용 - 로그인 이후 welcome 페이지 접근
        1. 웹브라우저 -> 서버(요청) 
        웹브라우저
        GET /welcome HTTP/1.1
        
        2. 서버 -> 웹브라우저(응답)
        서버
        HTTP/1.1 200 OK
        
        안녕하세요. 손님
    
        * 무상태(Stateless)
            - HTTP는 무상태(Stateless) 프로토콜이다.
            - 클라이언트와 서버가 요청과 응답을 주고 받으면 연결이 끊어진다.
            - 클라이언트가 다시 요청하면 서버는 이전 요청을 기억하지 못한다.
            - 클라이언트와 서버는 서로 상태를 유지하지 않는다.
            
        e.g 쿠키 미사용 - 대안(모든 요청에 사용자 정보 포함)
        1. 웹브라우저 -> 서버(요청) 
        웹브라우저
        GET /welcome?user=홍길동 HTTP/1.1
        
        2. 서버 -> 웹브라우저(응답)
        서버
        HTTP/1.1 200 OK
        
        안녕하세요. 홍길동님
            
        * 모든 요청에 정보를 넘기는 문제
            - 모든 요청에 사용자 정보가 포함되도록 개발해야함 > 개발자 힘듬
            - 브라우저를 완전히 종료하고 다시 열면? 
            
        * 이것을 해결하기 위해 쿠키를 사용
        
    a. Set-Cookie: 서버에서 클라이언트로 쿠키 전달(응답)
        e.g 쿠키 사용 - 로그인
        1. 웹브라우저 -> 서버(요청) 
        웹브라우저
        POST /login HTTP/1.1
        user=홍길동
        
        2. 서버 -> 웹브라우저(응답)
        서버
        HTTP/1.1 200 OK
        Set-Cookie: user=홍길동
        
        홍길동님이 로그인했습니다.
        
        * 서버에서 쿠키 헤더를 만들어서 응답
            - 웹 브라우저 내부에는 쿠키 저장소가 있는데 user=홍길동을 저장
            
        e.g 쿠키 사용 - 로그인 이후 welcome 페이지 접근
        1. 웹브라우저 -> 서버(요청) 
        웹브라우저
        POST /login HTTP/1.1
        Cookie: user=홍길동
        * 웹 브라우저는 쿠키 저장소에서 값이 있는지 찾은 후 Cookie: user=홍길동을 꺼냄
        
        2. 서버 -> 웹브라우저(응답)
        서버
        HTTP/1.1 200 OK
        
        안녕하세요. 홍길동님
        
        * 쿠키 - 모든 요청에 쿠키 정보 자동 포함
            e.g GET /welcome HTTP/1.1
                Cookie: user=홍길동
            
            e.g GET /board HTTP/1.1
                Cookie: user=홍길동
                
            e.g GET /order HTTP/1.1
                Cookie: user=홍길동
                
            e.g GET /xxx... HTTP/1.1
                Cookie: user=홍길동
        
    b. Cookie: 클라이언트가 서버에서 받은 쿠키를 저장하고, HTTP 요청시 서버로 전달
        e.g set-cookie: sessionld=abcde1234; expires=Sat, 26-Dec-2020 00:00:00 GMT; path=/; domain=.google.com; Secure
        - 사용처 
            - 사용자 로그인 세션 관리
            - 광고 정보 트래킹
        - 쿠키 정보는 항상 서버에 전송됨
            - 네트워크 트래픽 추가 유발
            - 최소한의 정보만 사용(세션 id, 인증 토큰)
            - 서버에 전송하지 않고, 웹 브라우저 내부에 데이터를 저장하고 싶으면 웹 스토리지(localStorage, sessionStorage) 참고                
        * 주의
            - 보안에 민감한 데이터는 저장하면 안됨(주민번호, 신용카드 번호 등등)
        
        * 생명주기
            - Set-Cookie: expires=Sat, 26-Dec-2020 04:39:21 GMT
                - 만료일(Expires)이 되면 쿠키 삭제
            - Set-Cookie: max-age=3600(3600초)
                * max-age: 0이나 음수를 지정하면 쿠키 삭제
            a. 세션 쿠키: 만료 날짜를 생략하면 브라우저 종료시 까지만 유지
            b. 영속 쿠키: 만료 날짜를 입력하면 해당 날짜까지 유지
        
        * 도메인(Domain)
            e.g domain=example.org
            a. 명시: 명시한 문서 기준 도메인 + 서브 도메인 포함
                - domain=example.org를 지정해서 쿠키 생성
                    - example.org는 쿠키 접근
                    - dev.example.org도 쿠키 접근
            b. 생략: 현재 문서 기준 도메인만 적용
                - example.org 에서 쿠키를 생성하고 domain 지정을 생략
                    - example.org 에서만 쿠키 접근
                    - dev.example.org는 쿠키 미접근
            
        * 경로(Path)
            e.g path=/home
            - 이 경로를 포함한 하위 경로 페이지만 쿠키 접근
            - 일반적으로 path=/ 루트로 지정
            e.g 
                a. path=/home 지정
                b. /home -> 가능
                c. /home/level1 -> 가능
                d. /home/level1/leve2 -> 가능
                e /hello -> 불가능
        
        * 보안
            a. Secure
                - 쿠키는 http, https를 구분하지 않고 전송
                - Secure를 적용하면 https인 경우에만 전송
            b. HttpOnly
                - XSS 공격 방지
                - 자바스크립트에서 접근 불가(document.cookie)
                - HTTP 전송에만 사용
            c. SameSite
                - XSRF 공격 방지
                - 요청 도에민과 쿠키에 설정된 도메인이 같은 경우에만 쿠키 전송