## 💡 HTTP General Header
    * HTTP 헤더
        - header-field = field-name ":" OWS field-value OWS(OWS:띄어쓰기 허용)
        - field-name은 대소문자 구문 없음
            GET /search?q=hello&hl=ko HTTP/1.1
            Host: www.google.com
            
            HTTP/1.1 200 OK
            Content-Type:text/html;charset=UTF-8
            Content-Length: 3423
            
            <html>
                <body>...</body>
            </html>
        
    * HTTP 헤더 용도
        - HTTP 전송에 필요한 모든 부가정보
        e.g 메세지 바디의 내용, 메세지 바디의 크기, 압축, 인증, 요청 클라이언트, 서버 정보, 캐시 관리 정보...
        - 표준 헤더가 너무 많음
        - 필요시 임의의 헤더 추가 가능
            e.g helloworld: hi
    
    * HTTP 헤더 분류 - RFC2616(과거)
        a. General 헤더: 메세지 전체에 적용되는 정보 
            - e.g Connection: close
        b. Request 헤더: 요청 정보 
            - e.g User-Agent: Mozilla/5.0(Macintosh; ..)
        c. Response 헤더: 응답 정보 
            - e.g Server: Apache
        d. Entity 헤더: 엔티티 바디 정보
            - e.g Content-Type: text/html, Content-Length: 3423 
                
        e.g 
        POST / HTTP/1.1
         
        [Request headers]
        Host: localhost:8000
        User-Agent: Mozilla/5.0(Macintosh; ..) FireFox/51.0
        Accpet: text/html, application/xhtml+xml, ..., */*;q=0.8
        Accpet-Language: en-US, en;q=0.5
        Accpet-Encoding: gzip, deflate
        
        [General headers]
        Connection: keep-alive
        Upgrade-Insecure-Requests: 1
        
        [Entity headers]
        Content-Type: multipart/form-data; boundary= 12656974
        Content-Length: 345
        
        -12656974
        (more data)
    
        * HTTP BODY - message body(RFC2616(과거))
            - 메세지 본문(message body)은 엔티티 본문(entity body)을 전달하는데 사용
            - 엔티티 본문은 요청이나 응답에서 전달할 실제 데이터(메세지 본문안에 엔티티 본문을 담아서 전달한다고 생각)
            - 엔티티 헤더는 엔티티 본문의 데이터를 해석할 수 있는 정보 제공
                - 데이터 유형(html, json), 데이터 길이, 압축 정보 등등
                
            e.g 
            HTTP/1.1 200 OK
            
            [엔티티 헤더]
            Content-Type:text/html;charset=UTF-8
            Content-Length: 3423
            
            [메세지 본문, 엔티티 본문]
            <html>
                <body>...</body>
            </html>
    
    
    * RFC723x 변화(최신)
        - 엔티티(Entity) -> 표현(Representation)
        - Representation = representation Metadata + Representation Data
        - 표현 = 표현 메타데이터 + 표현 데이터
        
            * HTTP BODY - message body(RFC7230(최신))
            - 메세지 본문(message body)을 통해 표현 데이터 전달
            - 메세지 본문 = 페이로드(payload)
            - 표현은 요청이나 응답에서 전달할 실제 데이터
            - 표현 헤더는 표현 데이터를 해석할 수 있는 정보 제공
                - 데이터 유형(html, json), 데이터 길이, 압축 정보 등등
            * 참고: 표현 헤더는 표현 메타데이터와 페이로드 메세지를 구분해야 하지만,
                
            e.g 
            HTTP/1.1 200 OK
            
            [표현 헤더]
            Content-Type:text/html;charset=UTF-8
            Content-Length: 3423
            
            [메세지 본문, 표현 데이터]
            <html>
                <body>...</body>
            </html>
            
## 💡 표현 헤더(Representation header)
    a. Content-Type: 표현 데이터의 형식
        - 표현 데이터의 형식 설명
        - 미디어 타입, 문자 인코딩
        * 표현 헤더는 전송, 응답 둘다 사용
        e.g 
            a. text/html; charset=UTF-8
                HTTP/1.1 200 OK
                Content-Type:text/html;charset=UTF-8
                Content-Length: 3423
                
                <html>
                    <body>...</body>
                </html>            
            
            b. application/json
                HTTP/1.1 200 OK
                Content-Type: application/json
                Content-Length: 16
                
                {"data": "hello"}
            
            c. image/png        
    
    b. Content-Encoding: 표현 데이터의 압축 방식
        - 표현 데이터 인코딩
        - 표현 데이터를 압축하기 위해 사용
        - 데이터를 전달하는 곳에서 압축 후 인코딩 헤더 추가
        - 데이터를 읽는 쪽에서 인코딩 헤더의 정보로 압축 해제
        
        e.g 
            a. gzip
            b. deflate
            c. identity(압축 안함)
            
            e.g
            HTTP/1.1 200 OK
            Content-Type:text/html;charset=UTF-8
            Content-Encoding: gzip
            Content-Length: 521
            
            lkj123klasdjikasjdqwanmdlasdnasdjkkio887213asd

    c. Content-Language: 표현 데이터의 자연 언어
        - 표현 데이터의 자연 언어
        - 표현 데이터의 자연 언어를 표현
        
        e.g 
            a. ko
            b. en
            c. en-US
            
            e.g
            HTTP/1.1 200 OK
            Content-Type:text/html;charset=UTF-8
            Content-Language: ko (en, en-US)
            Content-Length: 521
            
            <html>
            안녕하세요.
            </html>
                        
    d. Content-Length: 표현 데이터의 길이
        - 표현 데이터의 길이
        - 바이트 단위
        - Transfer-Encoding(전송 코딩)을 사용하면 Content-Length를 사용하면 안됨
        
        e.g 
        HTTP/1.1 200 OK
        Content-Type:text/html;charset=UTF-8
        Content-Length: 5
        
        hello
    
## 💡 협상(Content Negotiation)
    - 클라이언트가 선호하는 표현 요청
    a. Accpet: 클라이언트가 선호하는 [미디어 타입 전달]
    b. Accpet-Charset: 클라이언트가 선호하는 [문자 인코딩]
    c. Accpet-Encoding: 클라이언트가 선호하는 [압축 인코딩]
    d. Accpet-Language: 클라이언트가 선호하는 [자연 언어]
        e.g Accpet-Language 적용전
            1. 한국어 브라우저 사용(언어 지정 X) -> 다중 언어 지원 서버
            2. 다중 언어 지원 서버(언어 영어 설정) -> 한국어 브라우저 사용 

            * 한국어 브라우저
                GET /event

            * 다중 언어 지원 서버(기본 영어(en), 한국어 지원(ko))
                Content-Language: en
                hello(영어)
                
        e.g Accpet-Language 적용후
            1. 한국어 브라우저 사용(언어 한국어 지정) -> 다중 언어 지원 서버
            2. 다중 언어 지원 서버(언어 한국어 설정) -> 한국어 브라우저 사용 

            * 한국어 브라우저
                GET /event
                Accpet-Language: ko

            * 다중 언어 지원 서버(기본 영어(en), 한국어 지원(ko))
                Content-Language: ko
                안녕하세요    
    
        e.g Accpet-Language 복잡한 예시
            1. 한국어 브라우저 사용(언어 한국어 지정) -> 다중 언어 지원 서버
            2. 다중 언어 지원 서버(언어 독일어 설정) -> 한국어 브라우저 사용 

            * 한국어 브라우저
                GET /event
                Accpet-Language: ko

            * 다중 언어 지원 서버(기본 독일어(de), 영어도 지원(en))
                Content-Language: de
                Hallo(독일어)            
        
        * 협상과 우선순위 1(Quality Values(q))
        - Quality Values(q) 값 사용
        - 0~1, 클수록 높은 우선순위 (생략하면 1)
        - Accpet-Language: ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7
            1. ko-KR;q=1 (q생략)
            2. ko;q=0.9
            3. en-US;q=0.8
            4. en;q=0.7
        
        e.g 
            GET /event
            Accpet-Language: ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7

            e.g Accpet-Language 협상과 우선순위 사용 예시
            1. 한국어 브라우저 사용(언어 우선순위 지정) -> 다중 언어 지원 서버
            2. 다중 언어 지원 서버(언어 우선순위에 맞게 설정) -> 한국어 브라우저 사용 

            * 한국어 브라우저
                GET /event
                Accpet-Language: ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7

            * 다중 언어 지원 서버(기본 독일어(de), 영어도 지원(en))
                Content-Language: en
                Hello(영어)    

        * 협상과 우선순위 2(Quality Values(q))
        - 구체적인 것이 우선한다.
        - Accpet: text/*, text/plain, text/plain;format=flowed, */*
            1. text/plain;format=flowed
            2. text/plain
            3. text/* 
            4. */*
            
        e.g 
            GET /event
            Accpet: text/*, text/plain, text/plain;format=flowed, */*
            
        * 협상과 우선순위 3(Quality Values(q))
        - 구체적인 것을 기준으로 미디어 타입을 맞춘다.
        - Accpet: text/*;q=0.3, text/html;q=0.7, text/html;level=1, text/html;level=2;q=0.4, */*;q=0.5
            
            Media Type               Quality
            text/html;level=1           1
            text/html                  0.7
            text/plain                 0.3
            image/jpeg                 0.5        
            text/html;level=2          0.4
            text/html;level=3          0.7
            
    * 협상 헤더는 요청시에만 사용
    
## 💡 전송 방식
    a. 단순 전송(Content-Length)
        - 한번에 요청하고, 한번에 쭉 받는 것
        
        e.g 클라이언트(GET /event) -> 서버 
        HTTP/1.1 200 OK
        Content-Type: text/html;charset-UTF-8
        Content-Length: 3423
        
        <html>
            <body>...</body>
        </html>
    
    b. 압축 전송
        - gzip으로 압축했기 때문에 길이가 확 줄어듬
        
        e.g 클라이언트(GET /event) -> 서버  
        HTTP/1.1 200 OK
        Content-Type: text/html;charset-UTF-8
        Content-Encoding: gzip
        Content-Length: 521
        
        lkj123kljoasdnmkasdnkjsadnquwnj215dsascnjoasdjnklasdk
        
    c. 분할 전송
        - Transfer-Encoding: chunked 사용
        - 네트워크가 5byte(Hello) 보내고, 5byte(World) 보내고, 0byte Enter 쳐서 보냄(분할)
        * Content-Length를 넣어서 사용 X(예상을 못하기 때문에)
        
        e.g 클라이언트(GET /event) -> 서버  
        HTTP/1.1 200 OK
        Content-Type: text/plain
        Transfer-Encoding: chunked
        
        5
        Hello
        5
        World
        0
        \r\n
            
    d. 범위 전송(Range, Content-Range)
        - 범위를 지정해서 데이터 전송(Range: bytes=1001-2000)
        
        e.g 클라이언트(/event) -> 서버
            GET /event
            Range: bytes=1001-2000
            
            서버
            HTTP/1.1 200 OK
            Content-Type: text/plain
            Content-Range: bytes 1001-2000 / 2000
            
            qweqwe1l2iu3019qwdnjasdnjkawdnqwj213y
            
## 💡 일반 정보
    - 