## 💡 HTTP API 설계 (회원 정보 관리 API 설계)
    a. 잘못된 URI(Uniform Resource Identifier) 설계
        a. 회원 목록 조회
            - /read-member-list
        b. 회원 조회
            - /read-member-by-id
        c. 회원 등록
            - /create-member                
        d. 회원 수정
            - /update-member                
        e. 회원 삭제 
            - /delete-member
            
        * 위에 설계한 것은 좋은 URI 설계일까?
        * API URI(Uniform Resource Identifier) 설계 고민
            a. 리소스의 의미?
                - 회원을 등록하고 수정하고 조회하는게 리소스가 아니다.
                * 즉, 회원이라는 개념 자체가 바로 리소스다.
                e.g 미네랄 캐라 > 미네랄(리소스)

            b. 리소스를 어떻게 식별하는게 좋을까?
                - 회원을 등록하고 수정하고 조회하는 것을 모두 배제
                * 즉, 회원이라는 리소스만 식별하면 됨 > 회원 리소스를 URI에 매핑                
                
    b. 50% 제대로 된 URI(Uniform Resource Identifier) 설계
        - 리소스 식별, URI 계층 구조 활용
            a. 회원 목록 조회
                - /members
            b. 회원 조회
                - /members/{id}
            c. 회원 등록
                - /members/{id}                
            d. 회원 수정
                - /members/{id}        
            e. 회원 삭제 
                - /members/{id}    
                
            * 계층 구조상 상위를 컬렉션으로 보고 복수단어 사용 권장(member > members)
            * 회원 조회, 등록, 수정, 삭제를 어떻게 구분할지?
                - 리소스와 행위를 분리 (가장 중요한 것은 리소스를 식별하는 것)
                    a. URI는 리소스만 식별
                    b. 리소스와 해당 리소스를 대상으로 하는 행위를 분리
                        - 리소스 : 회원
                        - 행위 : 조회, 등록, 수정, 삭제
                    c. 리소스는 명사, 행위는 동사(미네랄 제외)
                    d. 행위(메서드)는 어떻게 구분?



## 💡 HTTP Method
    - 클라이언트가 서버에게 요청할 때 기대하는 행동
        a. GET
            - 리소스 조회
            - 서버에 전달하고 싶은 데이터는 query(쿼리 파라미터, 쿼리 스트링)를 통해서 전달
            - 메세지 바디를 사용해서 데이터를 전달할 수 있지만, 지원하지 않는 곳이 많아서 권장하지 않음
            e.g 리소스 조회
                GET /members/100 HTTP/1.1 
                Host: localhost:8080 
                    
                1. 클라이언트 -> 서버 (GET) - 리소스 조회1(메세지 전달)
                
                2. 클라이언트 -> 서버 (GET) - 리소스 조회2(서버 도착)
                /members/100
                {
                    "username" : "young",
                    "age" : 20
                }
                
                3. 서버 -> 클라이언트 (Response) - 리소스 조회3(응답 데이터)
                응답 데이터
                HTTP/1.1 200 OK
                Content-Type : application/json
                Content-Length :34
                {
                    "username" : "young",
                    "age" : 20
                }        
        b. POST
            - 요청 데이터 처리, 주로 등록에 사용 
            - 메세지 바디를 통해 서버로 요청 데이터 전달
            - 서버는 요청 데이터를 처리
                - 메세지 바디를 통해 들어온 데이터를 처리하는 모든 기능을 수행
            - 주로 전달된 데이터로 신규 리소스 등록, 프로세스 처리에 사용            
            e.g 리소스 등록
                POST /members HTTP/1.1
                Content-Type: application/json
                {
                    "username" : "young",
                    "age" : 20
                }    
                
                1. 클라이언트 -> 서버 (POST) - 리소스 등록1(메세지 전달)
                /members
                
                2. 클라이언트 -> 서버 (POST) - 리소스 등록2(신규 리소스 생성)
                /members -> /members/100(신규 리소스 식별자 생성)
                {
                    "username" : "young",
                    "age" : 20
                } 
                * 디비 등록 후 신규 아이디 생성 
                
                3. 서버 -> 클라이언트 (Response) - 리소스 등록3(응답 데이터)
                응답 데이터
                HTTP/1.1 201 Created
                Content-Type : application/json
                Content-Length :34
                Location: /members/100(자원이 생성된 경로)
                {
                    "username" : "young",
                    "age" : 20
                }
            
            * POST 정리
                a. 새 리소스 생성(등록)
                    - 서버가 아직 식별하지 않은 새 리소스 생성된
                b. 요청 데이터 처리
                    - 단순히 데이터를 생성하거나, 변경하는 것을 넘어서 프로세스를 처리해야 하는 경우
                        e.g 주문에서 결제완료 > 배달시작 > 배달완료 처럼 단순히 값 변경을 넘어 프로세스의 상태가 변경되는 경우
                    - POST의 결과로 새로운 리소스가 생성되지 않을 수도 있음
                        e.g POST/orders/{orderld}/start-delivery(컨트롤 URI)
                c. 다른 메서드로 처리하기 애매한 경우
                    e.g JSON으로 조회 데이터를 넘겨야 하는데, GET 메서드를 사용하기 어려운 경우
                    * 애매하면 POST 
        c. PUT 
            - 리소스를 완전히 대체, 해당 리소스가 없으면 생성 (덮어쓰기로 생각)
            - (매우 중요)클라이언트가 리소스를 식별
                - 클라이언트가 리소스 위치를 알고 URI 지정 (POST와 차이점)
            e.g 리소스가 있는 경우
                PUT /members/100 HTTP/1.1 (클라이언트가 /members/100 URI 지정)
                Content-Type: application/json
                {
                    "username" : "old",
                    "age" : 50
                }
                
                1. 클라이언트 -> 서버 (PUT) - 리소스가 있는 경우1 
                /members/100
                {
                    "username" : "young",
                    "age" : 20
                }
                
                2. 클라이언트 -> 서버 (PUT) - 리소스가 있는 경우2
                /members/100
                {
                    "username" : "old",
                    "age" : 50
                }            
                * 리소스가 대체
                
            e.g 리소스가 없는 경우
                PUT /members/100 HTTP/1.1 (클라이언트가 /members/100 URI 지정)
                Content-Type: application/json
                {
                    "username" : "old",
                    "age" : 50
                }
                
                1. 클라이언트 -> 서버 (PUT) - 리소스가 없는 경우1 
                /members/100 (해당 리소스 존재 X)
                
                2. 클라이언트 -> 서버 (PUT) - 리소스가 없는 경우2
                /members/100
                {
                    "username" : "old",
                    "age" : 50
                }            
                * 신규 리소스 생성

            e.g 주의 - 리소스를 완전히 대체
                PUT /members/100 HTTP/1.1 (클라이언트가 /members/100 URI 지정)
                Content-Type: application/json
                {
                    "age" : 50
                }
                * username 필드 없음
                
                1. 클라이언트 -> 서버 (PUT) - 리소스를 완전히 대체한다1
                /members/100
                {
                    "username" : "young",
                    "age" : 20
                }
                
                2. 클라이언트 -> 서버 (PUT) - 리소스를 완전히 대체한다2
                /members/100
                {
                    "age" : 50
                }            
                * 리소르를 완전히 대체 (username 필드 삭제됨)
                
        d. PATCH 
            - 리소스 부분 변경(회원 이름 변경, 특정 필드 변경)
            - PATCH가 안되는 서버가 존재 > 그럴 경우 POST 사용
            e.g : 리소스 부분 변경
                PATCH /members/100 HTTP/1.1 
                Content-Type: application/json
                {
                    "age" : 50
                }
            
                1. 클라이언트 -> 서버 (PATCH) - 리소스 부분 변경1
                PATCH /members/100 HTTP/1.1 
                Content-Type: application/json
                {
                    "age" : 50
                }
                * username 필드 없음    
                
                2. 클라이언트 -> 서버 (PATCH) - 리소스 부분 변경2
                /members/100
                {
                    "username" : "young",
                    "age" : 50
                }
                * 리소스 부분 변경(age만 50으로 변경)
                
        e. DELETE
            - 리소스 삭제
            e.g : 리소스 제거
                DELETE /members/100 HTTP/1.1 
                Host: localhost:8080 
                
                1. 클라이언트 -> 서버 (DELETE) - 리소스 제거1
                DELETE /members/100 HTTP/1.1 
                Host: localhost:8080 

                /members/100
                {
                    "username" : "young",
                    "age" : 20
                }
                
                2. 클라이언트 -> 서버 (DELETE) - 리소스 제거2
                    - /members/100 리소스 제거됨
            
    * 기타 메서드
        a. HEAD
            - GET과 동일하지만 메세지 부분을 제외하고 상태 줄과 헤더만 반환
        b. OPTIONS
            - 대상 리소스에 대한 통신 가능 옵션(메서드)을 설명(주로 CORS에서 사용)
        c. CONNECT
            - 대상 자원으로 식별되는 서버에 대한 터널을 설정
        d. TRACE
            - 대상 리소스에 대한 경로를 따라 메세지 루프백 테스트를 수행
    
    
## 💡 HTTP Method Property
    a. 안전(Safe Methods)
    
    b. 멱등(Idempotent Methods)
    
    c. 캐시가능(Cacheable Methods)
        