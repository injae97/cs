## 💡 HTTP API 설계 (회원 정보 관리 API 설계)
    a. 잘못된 URI(Uniform Resource Identifier) 설계
        a. 회원 목록 조회
            - /read-member-list
        b. 회원 조회
            - /read-member-by-id
        c. 회원 등록
            - /create-member                
        d. 회원 수정
            - /update-member                
        e. 회원 삭제 
            - /delete-member
            
        * 위에 설계한 것은 좋은 URI 설계일까?
        * API URI(Uniform Resource Identifier) 설계 고민
            a. 리소스의 의미?
                - 회원을 등록하고 수정하고 조회하는게 리소스가 아니다.
                * 즉, 회원이라는 개념 자체가 바로 리소스다.
                e.g 미네랄 캐라 > 미네랄(리소스)

            b. 리소스를 어떻게 식별하는게 좋을까?
                - 회원을 등록하고 수정하고 조회하는 것을 모두 배제
                * 즉, 회원이라는 리소스만 식별하면 됨 > 회원 리소스를 URI에 매핑                
                
    b. 50% 제대로 된 URI(Uniform Resource Identifier) 설계
        - 리소스 식별, URI 계층 구조 활용
            a. 회원 목록 조회
                - /members
            b. 회원 조회
                - /members/{id}
            c. 회원 등록
                - /members/{id}                
            d. 회원 수정
                - /members/{id}        
            e. 회원 삭제 
                - /members/{id}    
                
            * 계층 구조상 상위를 컬렉션으로 보고 복수단어 사용 권장(member > members)
            * 회원 조회, 등록, 수정, 삭제를 어떻게 구분할지?
                - 리소스와 행위를 분리 (가장 중요한 것은 리소스를 식별하는 것)
                    a. URI는 리소스만 식별
                    b. 리소스와 해당 리소스를 대상으로 하는 행위를 분리
                        - 리소스 : 회원
                        - 행위 : 조회, 등록, 수정, 삭제
                    c. 리소스는 명사, 행위는 동사(미네랄 제외)
                    d. 행위(메서드)는 어떻게 구분?



## 💡 HTTP Method
    HTTP 메서드 - GET, POST, 13 : 05 볼차례 
    
    b. GET, POST
    c. PUT, PATCH, DELETE 
    d. Property
	
## 💡 HTTP Method Property